{
  "version": 3,
  "sources": ["../src/utils/EventEmitter.ts", "../src/Danmaku.ts", "../src/Track.ts", "../src/DanmakuEngine.ts", "../src/index.ts"],
  "sourcesContent": ["export class EventEmitter {\r\n  // \u5B58\u50A8\u4E8B\u4EF6\u53CA\u5176\u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570\u5217\u8868\r\n  private events: { [eventName: string]: Array<(...args: any[]) => void> } = {};\r\n\r\n  // \u8BA2\u9605\u4E8B\u4EF6\r\n  public on(eventName: string, callback: (...args: any[]) => void): void {\r\n    if (!this.events[eventName]) {\r\n      this.events[eventName] = [];\r\n    }\r\n    this.events[eventName].push(callback);\r\n  }\r\n\r\n  // \u53EA\u8BA2\u9605\u4E00\u6B21\u4E8B\u4EF6\uFF0C\u89E6\u53D1\u540E\u81EA\u52A8\u53D6\u6D88\u8BA2\u9605\r\n  public once(eventName: string, callback: (...args: any[]) => void): void {\r\n    const onceCallback = (...args: any[]) => {\r\n      // \u5148\u6267\u884C\u56DE\u8C03\u51FD\u6570\r\n      callback(...args);\r\n      // \u6267\u884C\u5B8C\u540E\u53D6\u6D88\u8BA2\u9605\r\n      this.off(eventName, onceCallback);\r\n    };\r\n    this.on(eventName, onceCallback);\r\n  }\r\n\r\n  // \u53D6\u6D88\u8BA2\u9605\u4E8B\u4EF6\r\n  public off(eventName: string, callback: (...args: any[]) => void): void {\r\n    if (this.events[eventName]) {\r\n      this.events[eventName] = this.events[eventName].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n\r\n  // \u53D1\u5E03\u4E8B\u4EF6\r\n  public emit(eventName: string, ...args: any[]): void {\r\n    if (this.events[eventName]) {\r\n      this.events[eventName].forEach(callback => {\r\n        callback(...args);\r\n      });\r\n    }\r\n  }\r\n}\r\n", "import { Track } from \"./Track\"\r\nimport { EventEmitter } from \"./utils/EventEmitter\"\r\nimport { danmakuSet } from \"./DanmakuEngine\"\r\n\r\ntype DanmakuPosition = {\r\n  x: number\r\n  y: number\r\n}\r\n\r\ntype DanmakuRect = {\r\n  width: number\r\n  height: number\r\n}\r\nexport class Danmaku {\r\n  public element: HTMLElement | null = null\r\n  public parentTrack: Track | null = null\r\n  public animationID: number | null = null\r\n  public position: DanmakuPosition | null = null\r\n  public rect: DanmakuRect | null = null\r\n  public speedPerFrame = getRandomWithinTenPercent(0.5)\r\n  public currX = 0\r\n  public isPaused = false\r\n  private emitter = new EventEmitter()\r\n\r\n  constructor(track: Track, text: string) {\r\n    this.#initDanmaku(track, text)\r\n    danmakuSet.add(this)\r\n  }\r\n\r\n  #initDanmaku(track: Track, text: string) {\r\n    this.parentTrack = track\r\n    this.position = {\r\n      x: this.parentTrack.width,\r\n      y: this.parentTrack.index * this.parentTrack.height\r\n    }\r\n    this.element = document.createElement('div')\r\n    this.element.innerText = text\r\n    this.parentTrack.container.appendChild(this.element)\r\n\r\n    this.rect = {\r\n      width: this.element.clientWidth,\r\n      height: this.element.clientHeight\r\n    }\r\n    this.element.style.position = 'absolute'\r\n    this.element.style.left = `${this.position.x}px`\r\n    this.element.style.top = `${this.position.y}px`\r\n  }\r\n  startMove() {\r\n    this.isPaused = false\r\n    const run = () => {\r\n      this.animationID = requestAnimationFrame(() => {\r\n        if (!this.element || !this.parentTrack || !this.rect) return\r\n        this.element.style.transform = `translateX(${this.currX}px)`\r\n        this.currX -= this.speedPerFrame\r\n        // debugger\r\n        if (this.currX < -this.rect.width - 30) {\r\n          this.emitter.emit('completeShow')\r\n        }\r\n        if (this.currX < -this.parentTrack.width - this.rect.width - 50) {\r\n          this.destroy()\r\n          return\r\n        }\r\n        run()\r\n      })\r\n    }\r\n    run()\r\n  }\r\n\r\n  stopMove() {\r\n    if (this.animationID) {\r\n      cancelAnimationFrame(this.animationID)\r\n      this.animationID = null\r\n      this.isPaused = true\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.stopMove()\r\n    this.element?.remove()\r\n    danmakuSet.delete(this)\r\n  }\r\n\r\n  onCompleteShow(fn: () => any) {\r\n    this.emitter.once('completeShow', fn)\r\n  }\r\n}\r\n\r\n\r\nfunction getRandomWithinTenPercent(num: number) {\r\n  // \u8BA1\u7B97 10% \u7684\u8303\u56F4\r\n  const tenPercent = num * 0.5;\r\n  // \u751F\u6210\u4E00\u4E2A\u5728 -10% \u5230 10% \u4E4B\u95F4\u7684\u968F\u673A\u504F\u79FB\u91CF\r\n  const randomOffset = Math.random() * (2 * tenPercent) - tenPercent;\r\n  // \u8BA1\u7B97\u6700\u7EC8\u7684\u968F\u673A\u6570\r\n  return num + randomOffset;\r\n}", "import { Danmaku } from \"./Danmaku\"\r\nimport { danmakuSet } from \"./DanmakuEngine\"\r\n\r\nexport type TrackOptions = {\r\n  height: number\r\n  width: number\r\n  index: number\r\n  container: HTMLElement\r\n}\r\n\r\nexport class Track {\r\n  public height: number\r\n  public width: number\r\n  public index: number\r\n  public container: HTMLElement\r\n  public isLocked: boolean = false\r\n\r\n  constructor(trackOptions: TrackOptions) {\r\n    this.height = trackOptions.height\r\n    this.width = trackOptions.width\r\n    this.index = trackOptions.index\r\n    this.container = trackOptions.container\r\n  }\r\n\r\n  send(text: string) {\r\n    this.isLocked = true\r\n    const danmaku = new Danmaku(this, text)\r\n    danmaku.startMove()\r\n    danmaku.onCompleteShow(() => {\r\n      this.isLocked = false\r\n      console.log(\"\u89E3\u9501\");\r\n    }\r\n    )\r\n  }\r\n}", "import { Track } from \"./Track\"\r\nimport { Danmaku } from \"./Danmaku\"\r\n\r\nexport type DanmakuEngineOptions = {\r\n  antiOcclusion?: boolean\r\n}\r\n\r\nexport const danmakuSet: Set<Danmaku> = new Set()\r\n\r\nexport class DanmakuEngine {\r\n  public container: HTMLElement\r\n  public tracks: Track[] = []\r\n  public cacheStack: string[] = []\r\n  public isPlaying: boolean = false\r\n  public interval: number | null = null\r\n\r\n  constructor(parentContainer: HTMLElement, options: DanmakuEngineOptions) {\r\n    this.container = document.createElement('div')\r\n    this.container.style.position = 'relative'\r\n    this.container.style.height = '100%'\r\n    this.container.style.width = '100%'\r\n    this.container.style.display = 'flex'\r\n    parentContainer.appendChild(this.container)\r\n    this.container.style.backgroundColor = 'transparent'\r\n    this.#initTracks()\r\n\r\n  }\r\n\r\n  startPlaying() {\r\n    this.isPlaying = true\r\n\r\n    // \u6E05\u9664\u4E4B\u524D\u7684\u8F6E\u8BE2\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n      this.interval = null\r\n    }\r\n\r\n    danmakuSet.forEach(danmaku => {\r\n      danmaku.startMove()\r\n    })\r\n\r\n    // \u8F6E\u8BE2\u6BCF\u4E2A\u672A\u9501\u5B9A\u7684\u8F68\u9053\uFF0C\u5982\u679C\u6709\u5F39\u5E55\u5219\u53D1\u9001\r\n    this.interval = setInterval(() => {\r\n      console.log(\"interval\", this.cacheStack, Math.random());\r\n\r\n      if (this.cacheStack.length) {\r\n        const text = this.cacheStack.shift()\r\n        if (text) {\r\n          const track = this.tracks.find(track => !track.isLocked)\r\n          if (track) {\r\n            console.log(track);\r\n\r\n            track.send(text)\r\n          }\r\n        }\r\n      }\r\n    }, 300)\r\n  }\r\n\r\n  stopPlaying() {\r\n    this.isPlaying = false\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n      this.interval = null\r\n    }\r\n    danmakuSet.forEach(danmaku => {\r\n      danmaku.stopMove()\r\n    })\r\n  }\r\n\r\n  send(text: string) {\r\n    this.cacheStack.push(text)\r\n  }\r\n\r\n  pause() {\r\n    danmakuSet.forEach(danmaku => {\r\n      danmaku.stopMove()\r\n    })\r\n    this.isPlaying = false\r\n  }\r\n\r\n  #initTracks() {\r\n    const trackCount = 5\r\n    for (let i = 0; i < trackCount; i++) {\r\n      const track = new Track({\r\n        height: 32,\r\n        width: this.container.clientWidth,\r\n        index: i,\r\n        container: this.container\r\n      })\r\n      this.tracks.push(track)\r\n    }\r\n  }\r\n}", "export function hello(word: string) {\r\n  console.log('hello')\r\n  return word\r\n}\r\n\r\nexport * from './DanmakuEngine';\r\nexport * from './Track';\r\nexport * from './Danmaku';"],
  "mappings": "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",
  "names": ["track"]
}
